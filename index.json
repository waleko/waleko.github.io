[{"authors":null,"categories":null,"content":"Hello, I’m Alexander Kovrigin, currently in my third year of Computer Science studies at Constructor University, Bremen. I’m originally from St. Petersburg and have had an interesting educational journey so far.\nI attended the Physical-Technical High School in St. Petersburg, where I developed a strong interest in Physics, Mathematics, and Computer Science. Participating in national mathematics and informatics olympiads, along with working on personal projects during summers, became my way of embracing these subjects.\nAfter completing high school, I enrolled at the Higher School of Economics in St. Petersburg. I was fortunate to perform well academically, securing the top spot in both semesters. During this time, I also worked on coursework projects, notably contributing to a semester-long C++ project called Cavoke, which I completed alongside a dedicated team of three.\nIn 2022, I made the decision to transfer to Constructor University Bremen, where I could explore a more international and English-speaking environment. Continuing my academic journey, I participated in international olympiads like IMC, where I was honored with a First Prize award, and NWERC (ICPC semi-final), achieving a commendable place within the top 20% teams.\nCurrently, my focus is on research that involves applying machine learning techniques to material science. This research showcases my dedication to expanding the practical applications of my knowledge.\nThank you for visiting my website, and I look forward to sharing more about my journey in the world of Computer Science and beyond.\n  Download my resumé.\n","date":1678060800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1691539200,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Hello, I’m Alexander Kovrigin, currently in my third year of Computer Science studies at Constructor University, Bremen. I’m originally from St. Petersburg and have had an interesting educational journey so far.","tags":null,"title":"Alexander Kovrigin","type":"authors"},{"authors":["Alexander Kovrigin"],"categories":["Tutorials"],"content":"Exploring Object-Relational Mapping with Drogon: A Practical Example Welcome to this blog post, where we delve into the fascinating realm of Object-Relational Mapping (ORM) using the robust Drogon C++ server framework. Our journey will unravel the mechanics of Drogon’s ORM, allowing us to seamlessly bridge the gap between objects and databases. Let’s begin!\nIntroducing Drogon Drogon stands as a beacon of modernity in the realm of C++14/17-based HTTP application frameworks. With an impressive 8k stars on GitHub, Drogon boasts a plethora of advantages, including:\n Enabling a fully asynchronous programming paradigm. Facilitating seamless integration with JSON format for requests and responses, a boon for Restful API development. Providing support for file upload and download operations. Harnessing non-blocking I/O for asynchronous database operations (with PostgreSQL and MySQL/MariaDB). Offering a plugin system for effortless integration of additional features via configuration files. Embracing C++ coroutines to simplify complex asynchronous code.  Of special interest to us is Drogon’s lightweight and intuitive ORM implementation. This ORM prowess forms the focal point of our exploration.\nSetting the Stage Let’s set the scene for our practical endeavor. Envision a world where interplanetary travel has become an everyday affair. In this context, our database will house the data of a pioneering space travel company. Our database schema comprises four essential entities:\n Planets: Containing details such as id, name, and distance from the sun (in millions of km). Spacecrafts: With attributes like id, name, and capacity. Flights: Comprising num, planet_id, and spacecraft_id. Tickets: Encompassing flight_num, pax_name, and price.  Here’s a concrete example for each entity:\n Planet Example: (3, \u0026#39;Earth\u0026#39;, 150) Spacecraft Example: (5, \u0026#39;Aurora\u0026#39;, 10) Flight Example: (1300, 3, 5) Ticket Example: (1300, \u0026#39;John\u0026#39;, 100)  The visual representation of this model takes the form of an Entity Relationship Model (ERM):   The Power of Drogon ORM Unveiling Drogon ORM Drogon ORM’s capabilities are extensively documented here.\nCode Generation Made Easy Let’s dive into action. Unlike conventional ORMs that require manual entity configuration and database adaptation, Drogon ORM employs a unique approach. It dynamically generates entity classes based on the database schema. This approach is necessitated by C++’s current lack of a reflection mechanism.\nOur database schema resides in the resources/postgres-init.sql file. Once the database setup is complete, entity classes can be generated using drogon_ctl. A simple command like drogon_ctl create model model regenerates files within the ./model directory. Ensure the model/model.json file contains accurate configuration if any connection issues arise.\nHarnessing Entity Classes Let’s now witness the prowess of Drogon ORM through the src/SimpleController.cc file, housing a slew of handlers.\nOur objective revolves around three methods:\n Fetching a list of all tickets. Retrieving flight information, along with its corresponding destination planet and spacecraft, based on the flight number. Adding a new spacecraft to the database.  Fetching All Tickets Ordinarily, retrieving a simple query result involves considerable effort. For instance, a PostgreSQL query like select * from tickets; must be executed, followed by the retrieval of results. Drogon ORM simplifies this process significantly:\n// ... auto dbClient = drogon::app().getDbClient(); auto ticketMapper = Mapper\u0026lt;Tickets\u0026gt;(dbClient); std::vector\u0026lt;Tickets\u0026gt; allTickets = ticketMapper.findAll(); The result? A vector of tickets, precisely as desired!\nComprehensive Flight Information In scenarios involving complex queries, the burden intensifies. A task like retrieving flight details, associated destination planets, and used spacecrafts might entail multiple queries. For instance:\nselect * from flights where num = ?; select s.* from spacecrafts s join flights f on s.id = f.spacecraft_id where f.num = ?; select p.* from planets p join flights f on p.id = f.planet_id where f.num = ?; Drogon ORM’s elegance shines through in comparison:\n// ... auto dbClient = drogon::app().getDbClient(); auto flightMapper = Mapper\u0026lt;Flights\u0026gt;(dbClient); auto flight = flightMapper.findByPrimaryKey(search_flight_num); flight.getSpacecrafts(dbClient, /* callback */, /* error handling */); flight.getPlanets(dbClient, /* callback */, /* error handling */);  Note: getSpacecrafts adopts plural form due to the spacecrafts table name.\n Adding a New Spacecraft The contrast remains palpable even when inserting new data. A conventional PostgreSQL insert query:\ninsert into spacecrafts values (?, ?, ?); In the ORM realm, Drogon offers a cleaner, more intuitive solution:\n// ... auto dbClient = drogon::app().getDbClient(); auto spacecraftMapper = Mapper\u0026lt;Spacecrafts\u0026gt;(dbClient); spacecraftMapper.insert(spacecraftReq, /* callback */, /* error handling */); A Glimpse of the Rich Toolbox Explore …","date":1678060800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1691539200,"objectID":"2e0b567c1e10dc216a3ae609def8ca5d","permalink":"https://alexkovrigin.me/post/drogon-orm-demo/","publishdate":"2023-03-06T00:00:00Z","relpermalink":"/post/drogon-orm-demo/","section":"post","summary":"Embark on a comprehensive exploration of Object-Relational Mapping (ORM) using Drogon, the cutting-edge C++ server framework. Discover how Drogon's dynamic entity class generation and intuitive mapping streamline complex database interactions, ushering in a new era of seamless integration between C++ applications and relational databases.","tags":null,"title":"C++ ORM with Drogon","type":"post"},{"authors":["Alexander Kovrigin"],"categories":["Tutorials"],"content":"What is Cavoke Cavoke is a platform for creating and hosting multiplayer board games. It comes with built-in solutions to solve many common-found problems associated with developing a multiplayer game.\nIf you are new to Cavoke, I would advise you to consult the documentation’s Introduction section.\nQuick Start Let’s look at the cavoke development using Tic-Tac-Toe game as an example. You can freely browse our final code on GitHub.\nClient-side First of all, let’s begin with our client component. We will delegate all the checking and validating to the server side, and only receive full board state and send cell clicks.\nWe will create a brand-new QML application:\nimport QtQuick 2.0 Rectangle { id: game width: display.width; height: display.height + 10 } Now let’s add the code for interacting with main cavoke application:\nimport QtQuick 2.0 Rectangle { // BEGIN cavoke section  Connections { target: cavoke function onReceiveUpdate(jsonUpdate) { console.log(\u0026#34;Received: \u0026#34; + jsonUpdate); // TODO: update board  } } // END cavoke section  id: game width: display.width; height: display.height + 10 } Now let’s add our board image and a grid with our small icons:\nimport QtQuick 2.0 import \u0026#34;content\u0026#34; Rectangle { // BEGIN cavoke section  Connections { target: cavoke function onReceiveUpdate(jsonUpdate) { console.log(\u0026#34;Received: \u0026#34; + jsonUpdate); // TODO: update board  } } // END cavoke section  id: game width: display.width; height: display.height + 10 Image { id: boardImage source: \u0026#34;content/pics/board.png\u0026#34; } Column { id: display Grid { id: board width: boardImage.width; height: boardImage.height columns: 3 Repeater { model: 9 Rectangle { // TODO: use a custom class  width: board.width/3 height: board.height/3 onClicked: { // TODO: send move  } } } } Row { spacing: 4 anchors.horizontalCenter: parent.horizontalCenter } } } Now let’s finally implement the logic. For this let’s create a separate content/interactions.js for move processing. It can look like this:\nfunction processResponse(response) { let res = JSON.parse(response) updateBoard(res[\u0026#34;state\u0026#34;]); } function sendMove(moveString) { let move = {} move.move = \u0026#34;X\u0026#34; + moveString cavoke.getMoveFromQml(JSON.stringify(move)) } function updateBoard(boardString) { for (let i = 0; i \u0026lt; 9; ++i) { board.children[i].state = boardString[i]; } } function gameFinished(message) { messageDisplay.text = message messageDisplay.visible = true } function resetField() { for (var i = 0; i \u0026lt; 9; ++i) board.children[i].state = \u0026#34;\u0026#34; } We will also create a custom TicTac class for our noughts and crosses:\n// FILE: content/TicTac.qml import QtQuick 2.0 Item { signal clicked states: [ State { name: \u0026#34;X\u0026#34;; PropertyChanges { target: image; source: \u0026#34;pics/x.png\u0026#34; } }, State { name: \u0026#34;O\u0026#34;; PropertyChanges { target: image; source: \u0026#34;pics/o.png\u0026#34; } } ] Image { id: image anchors.centerIn: parent } MouseArea { anchors.fill: parent onClicked: parent.clicked() } } Finally, our main app.qml looks now like this:\nimport QtQuick 2.0 import \u0026#34;content\u0026#34; import \u0026#34;content/interactions.js\u0026#34; as Interact Rectangle { // BEGIN cavoke section  Connections { target: cavoke function onReceiveUpdate(jsonUpdate) { console.log(\u0026#34;Received: \u0026#34; + jsonUpdate); Interact.processResponse(jsonUpdate); } } // END cavoke section  id: game width: display.width; height: display.height + 10 Image { id: boardImage source: \u0026#34;content/pics/board.png\u0026#34; } Column { id: display Grid { id: board width: boardImage.width; height: boardImage.height columns: 3 Repeater { model: 9 TicTac { width: board.width/3 height: board.height/3 onClicked: { Interact.sendMove(String(index)); } } } } Row { spacing: 4 anchors.horizontalCenter: parent.horizontalCenter } } Text { id: messageDisplay anchors.centerIn: parent color: \u0026#34;blue\u0026#34; style: Text.Outline; styleColor: \u0026#34;white\u0026#34; font.pixelSize: 50; font.bold: true visible: false Timer { running: messageDisplay.visible onTriggered: { messageDisplay.visible = false; Interact.resetField(); } } } } This is it for the client-side! You can browse the final code along with static assets on GitHub.\nServer-side As outlined in the documentation, we have to implement three http-methods. We will use our template repository for this. Now we only need to implement three methods in a C++ project.\nOur code is currently:\n#include \u0026#34;cavoke.h\u0026#34; namespace cavoke { bool validate_settings( const json \u0026amp;settings, const std::vector\u0026lt;int\u0026gt; \u0026amp;occupied_positions, const std::function\u0026lt;void(std::string)\u0026gt; \u0026amp;message_callback) { // TODO: Implement your game validation here  return true; } GameState init_state(const json \u0026amp;settings, const std::vector\u0026lt;int\u0026gt; \u0026amp;occupied_positions) { // TODO: Implement your game start here  return GameState{false, \u0026#34;\u0026lt;INIT_STATE\u0026gt;\u0026#34;, {}, {}}; } GameState apply_move(GameMove \u0026amp;new_move) { // TODO: Implement your game move event processing here  return GameState{false, \u0026#34;\u0026lt;GLOBAL_STATE\u0026gt;\u0026#34;, {}, {}}; } } // namespace cavoke Filling this out with our state structure, we can achieve code looking something like this:\n#include \u0026lt;sstream\u0026gt;#include \u0026#34;cavoke.h\u0026#34; namespace cavoke { …","date":1661385600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1661385600,"objectID":"0c6b9ac371714c38f9c873fb5456fc0b","permalink":"https://alexkovrigin.me/post/cavoke-game-quick-start/","publishdate":"2022-08-25T00:00:00Z","relpermalink":"/post/cavoke-game-quick-start/","section":"post","summary":"Hi 👋 In this quick tutorial I walkthrough how to create your first cavoke game","tags":["School","GameDev"],"title":"Creating a Cavoke Game","type":"post"},{"authors":null,"categories":null,"content":"Overview Problem formulation We believe that developing a desktop multiplayer game is always a great adventure that has many wonderful opportunities to learn something new along the way. However, in our opinion this journey, is often riddled with unnecessary challenges of implementing mechanisms that are common for many games. This includes:\n Developing a client application with many UI components for game creation process Networking, which in itself includes  Synchronizing the game state among clients Handling network issues on client’s side SSL and Security   Game state persistence Game move validation Role choosing (e.g. White/Black in Chess) Managing game sessions and shareable invites for friends to play with you Game and User statistics (win rate, total time spent, etc.) User Authentication and Authorization Game versioning Hosting server logic and scalability  To make these obstacles easier to avoid, we developed a framework for developing multiplayer turn-based board games that comes with built-in solutions to solve all the above-mentioned problems.\nOur solution We have developed a solution that works for many board games. Your board game can work with cavoke if:\n   Requirement Description     ✅ Is a board game Has a simple 2D interface. Game interface must be implementable using QML.   ✅ Is based on moves All changes during the game are based on the moves and updates that are representable as a string.   ✅ No race conditions If multiple players are eligible to move at the given moment, there is no guarantee that the first one to move will be recorded as such. However, there is a guarantee that the resulting game state is achieved via a valid subsequence of game moves.    Developers side Our platform provides an easy way for developers to create a desktop game. A developer should provide only two components:\n Server logic component that verifies one’s move correctness and updates the game state Client game component. A QML application that communicates with the main Cavoke Client application and sends player’s moves through this gateway. It also receives updates from other players’ moves to update its user interface.  You can read more about creating your own cavoke game on our Cavoke Game Template GitHub page that has been made to flatten the learning curve.\nPlayers side Furthermore, we provide many features in our cavoke client for the users. These include:\n Cross-platform: Available on Windows, macOS and Linux User Authentication using Email-Password or SSO via Google or GitHub Catalog of available cavoke games Rooms with shareable invites for your friends, so you can play multiple games without the need to change the app User’s statistics for every game Developer mode to test QML components locally     How To Use Please see the instructions for how to clone and build server and client components in its subdirectories.\n Server Client  Download You can download the latest installable version of Cavoke Client for Windows, macOS and Linux.\nCredits This software uses the following open source projects:\n Qt Drogon Circle Icons by Nick Roach Boost KArchive KDE Craft ECM jwt-cpp qtkeychain nlohmann/json Quassel  Credit to Mudlet and Markdownify for the README inspiration.\nLicense MIT\n  @MarkTheHopeful · @waleko · @petrtsv\n ","date":1656633600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1656633600,"objectID":"4f284ba303239c7530b80ed5029d74d7","permalink":"https://alexkovrigin.me/project/cavoke/","publishdate":"2022-07-01T00:00:00Z","relpermalink":"/project/cavoke/","section":"project","summary":"A Platform for creating and hosting multiplayer turn-based board games.","tags":["School","GameDev"],"title":"Cavoke","type":"project"},{"authors":null,"categories":null,"content":"What is Wikirace Wikirace is a single-/multiplayer game about traversing links from one wikipedia page to another.\nPlayers are given two wikipedia page titles. Their goal is to make their way from the one to the other by only clicking links on the wikipedia page they are on. The faster you get to the goal page, the more points you get! You can read more about rules here.\nFeatures  Both singleplayer and multiplayer supported Automatic round generation Persistence of state after page refresh Asynchronous websockets Postgresql and Redis databases Automatic deploy and CI/CD  Goals of this project This website is a first year educational project for AMI at HSE SPb. Therefore it’s main purpose is familiarizing myself with various technologies.\nWork of other people used ‘Circle Icons’ by Nick Roach provided under GPL v3.0.\nLicense This project is MIT licensed.\n","date":1640736e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1640736e3,"objectID":"4fd05d049d329e921f9b9989dd6d4e9a","permalink":"https://alexkovrigin.me/project/wikirace/","publishdate":"2021-12-29T00:00:00Z","relpermalink":"/project/wikirace/","section":"project","summary":"Online game about traversing links from one wikipedia page to another","tags":["School","Personal","GameDev"],"title":"Wikirace","type":"project"},{"authors":null,"categories":null,"content":"What is AlgorithmD AlgorithmD is a website for sharing snippets of code.\nIt is named after Donald Knuth’s “Algorithm D”, that implements division of nonnegative integers (learn more).\nYou can even see an implementation of Algorithm D on AlgorithmD!\nFeatures  Built-in code editor that supports all major languages Drag-n-drop support Snippet tags for grouping Search of snippets by title, filename, tags, code or their parts Publicly accessible URLs Download and copy functionalities  Goals of this project The main goal of this project is educational, as countless other alternatives exist (gist, pastebin and many others). While creating this website I got to familiarize myself with such technologies as Angular, Ktor, Google App Engine, Firebase Realtime Database, Auth0 and much more.\nLinked repositories  Frontend: waleko/algorithmd. Built with Angular. Hosted on Cloudflare Pages. Backend: waleko/algorithmd-uploader. Written in Kotlin using Ktor. Hosted on Google App Engine.  License AlgorithmD is Apache 2 licensed.\n","date":1626652800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1626652800,"objectID":"2ad0a076955e9648204be6ad0a706b67","permalink":"https://alexkovrigin.me/project/algorithmd/","publishdate":"2021-07-19T00:00:00Z","relpermalink":"/project/algorithmd/","section":"project","summary":"Website for sharing code snippets","tags":["Personal"],"title":"AlgorithmD","type":"project"},{"authors":null,"categories":null,"content":"What is this OGPS corrector is a research project completed at the Academic lyceum “Physical-Technical High School” named after Zh. I. Alfyorov. Together with my classmate, Mark Ipatov, during a year-long research internship at O-GPS Center we have developed a system for correcting the path of an orienteering sportsman.\nAbstract Many sports (for example, sailing, multi-racing, various marathons and orienteering) do not allow spectators to constantly watch the athletes. To increase entertainment and control, trackers are used, the data from which is shown to viewers in real time. However, when conducting such online broadcasts, the organizers face the problem of inaccurate display of the position of the athlete. This can make it difficult for viewers to follow the dynamics of the event.\nThe goal of our work is to create a correction system that will correctly display the location of the athlete using a specific model for a particular sport. Our work is devoted to methods of correction for orienteering.\nTo achieve the goal, we implemented and compared several correction methods: naive pulling the athlete to the road, Kalman filter, hybrid options.\nAs a result, one of our hybrid options turned out to be 36% more accurate than the naive one. However, further improvement of this correction algorithm is possible.\n","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609459200,"objectID":"6df122e8d42ce335b9eb6cbddca2470b","permalink":"https://alexkovrigin.me/project/ogps_corrector/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/project/ogps_corrector/","section":"project","summary":"System for correcting the position of a participant in orienteering competitions using the Kalman filter on Kotlin","tags":["School"],"title":"OGPS Corrector","type":"project"},{"authors":["Alexander Kovrigin","Mark Ipatov","Mikhail Senin"],"categories":null,"content":"","date":1609286400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609286400,"objectID":"dfad4c30abe78df5ae55abebbadcf347","permalink":"https://alexkovrigin.me/publication/ogps_corrector/","publishdate":"2020-12-30T00:00:00Z","relpermalink":"/publication/ogps_corrector/","section":"publication","summary":"Many sports (for example, sailing, multi-racing, various marathons and orienteering) do not allow spectators to constantly watch the athletes. To increase entertainment and control, trackers are used, the data from which is shown to viewers in real time. However, when conducting such online broadcasts, the organizers face the problem of inaccurate display of the position of the athlete. This can make it difficult for viewers to follow the dynamics of the event. The goal of our work is to create a correction system that will correctly display the location of the athlete using a specific model for a particular sport. Our work is devoted to methods of correction for orienteering. To achieve the goal, we implemented and compared several correction methods: naive pulling the athlete to the road, Kalman filter, hybrid options. As a result, one of our hybrid options turned out to be 36% more accurate than the naive one. However, further improvement of this correction algorithm is possible.","tags":["School"],"title":"Development of a GPS-coordinates correction system for live broadcasting of orienteering competitions using the Kalman filter on Kotlin","type":"publication"},{"authors":null,"categories":null,"content":"// Encryption QByteArray message(\u0026#34;secret\u0026#34;); QImage *image = new QImage(\u0026#34;./images/sunset.jpg\u0026#34;); QImage *image_to_send = ModelPC::Encrypt(message, image, \u0026#34;password1\u0026#34;); // Decryption QByteArray incoming_message = ModelPC::Decrypt(image_to_send, \u0026#34;password1\u0026#34;); // \u0026#34;secret\u0026#34; What is PictureCrypt PictureCrypt is a simple educational cross-platform steganography tool that hides data in images. This project is built on Qt Platform using the MVC pattern and features GUI and console interface. Project repository is available on GitHub.\nDownload Get stable binary files at latest release page Or download latest potentially unstable files:\nLinks Windows:  Exe with release (~ 22 MB) Zip with console (~ 21 MB) Exe with console (~ 19 MB)  Linux:  Binary of release (Qt not included) (~ 10 MB)  Console use $ picturecrypt -h Usage: picturecrypt encrypt \u0026lt;image\u0026gt; \u0026lt;input file\u0026gt; \u0026lt;key\u0026gt; \u0026lt;output\u0026gt; [options] picturecrypt decrypt \u0026lt;image\u0026gt; \u0026lt;key\u0026gt; \u0026lt;output\u0026gt; [options] picturecrypt (-h | --help) picturecrypt --version Options: -h --help Show this screen. --version Show version. -m --mode Mode of cryption. -b Encryption bitsUsed parameter. $ picturecrypt --version 1.4.1 $ picturecrypt encrypt original.jpg data.txt somekey result.png $ picturecrypt decrypt result.png somekey output.txt Available modes of encrypting  0 - Auto-detect, used for decryption, so it auto-detects (invalid at encryption as you must select the encryption type) 1 - v1.3, only available on versions 1.3+ 2 - v1.4, advanced (default) encryption mode, available on versions v1.4+  Documentation  HTML documentation PDF documentation  Documentation generated by Doxygen\nCI/CD Continuous integration is fulfilled via Travis CI for Linux and AppVeyor for Windows.\ni18n This project is available in multiple languages thanks to the Qt Linguist Platform.\nAvailable languages:\n English (default) Russian German  Works of other people used in this project  QAESEncryption by bricke (provided under unlicense) ‘Circle Icons’ by Nick Roach provided under GPL v3.0. ‘MS Shell Dlg 2’ font used and ‘Montserrat’ font used under the SIL Open Font License.  License This software is MIT licensed.\n","date":1550534400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1550534400,"objectID":"b532ff6dce7f96ab54e07db166c595ff","permalink":"https://alexkovrigin.me/project/picturecrypt/","publishdate":"2019-02-19T00:00:00Z","relpermalink":"/project/picturecrypt/","section":"project","summary":"Image-steganography tool","tags":["Personal"],"title":"PictureCrypt","type":"project"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne  Two  Three   A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}}  Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://alexkovrigin.me/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"}]